mode OnOff = Off | accessible On

fun hoge(x,y) = x == y

switchmodule Main {
  in   clock(0)   : 'OnOff Int,
       di         : Float
  out  ctime(0)   : Int,
       otime(0)   : Int,
       fan(False) : Bool
  init FanOff

  state FanOff with clock >= On {
    out node ctime = ctime@last

    out node otime = 0

    out node fan = False

    switch :
      if di >=. 75.5 then FanOn(clock)
      else Retain
  }

  state FanOn(begin : Int) with clock >= On {
    out node ctime =
      let dt = clock - clock@last in
      ctime@last + dt

    out node otime = clock - begin

    out node fan = True

    switch :
      if di <=. 74.5 then FanOff
      else if otime > 7200 then FanSleep
      else Retain
  }

  state FanSleep with clock >= On {
    out node ctime = ctime@last

    out node otime = 0

    out node fan = False

    node timer(1800) =
      let dt = clock - clock@last in
      timer@last - dt

    switch :
      if timer <= 0 then FanOff else Retain
  }
}
